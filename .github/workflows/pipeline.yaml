on:
  push:
  workflow_dispatch:
  pull_request:

name: Pipeline

env:
  PYTHON_VERSION: 3.11

jobs:
  validate-python:
    defaults:
      run:
        shell: bash
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: specdown/setup-specdown-action@v0.2.26
      - name: Set up python ${{ env.PYTHON_VERSION }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - uses: armakuni/github-actions/setup-poetry@v0.18.2
      - name: Install dependencies
        shell: bash
        run: poetry install --no-interaction --no-root
      - run: make lint
      - name: Spot vunerable dependencies
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          exit-code: '1'
          scan-ref: .


  docker-build:
    runs-on: ubuntu-latest
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'
          overprovision-lvm: 'true'
      - name: Checkout
        uses: actions/checkout@v4.1.1
        with:
          submodules: recursive
      - name: Build
        shell: bash
        run: |
          docker pull ghcr.io/purplebooth/utility-container-suno-bark:latest || true
          docker build -t test .
      - name: Test run
        shell: bash
        run: |
          INPUT_FOLDER="$PWD/in"
          OUTPUT_FOLDER="$PWD/out"
          CACHE_FOLDER="$PWD/cache"
          mkdir -p "$CACHE_FOLDER" "$INPUT_FOLDER" "$OUTPUT_FOLDER"
          chmod -vR a+rwx "$CACHE_FOLDER" "$INPUT_FOLDER" "$OUTPUT_FOLDER"
          echo "hello" > "$INPUT_FOLDER/file.txt"
          
          docker run \
            --volume "$CACHE_FOLDER:/cache" \
            --volume "$INPUT_FOLDER:/in" \
            --volume "$OUTPUT_FOLDER:/out" \
            --rm \
            "test" -- /in/file.txt /out/file.wav

  check-conventional-commits:
    uses: armakuni/github-actions/.github/workflows/check-conventional-commits.yml@v0.18.2

  lint-pipeline:
    uses: armakuni/github-actions/.github/workflows/lint-pipeline.yml@v0.18.2


  all-tests-succeeded:
    needs:
      - validate-python
      - docker-build
      - check-conventional-commits
      - lint-pipeline
    runs-on: ubuntu-latest
    steps:
      - run: "true"
        shell: bash

  release:
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write
    needs:
      - all-tests-succeeded
    outputs:
      version_bump: ${{ steps.current_version.outputs.current_version != steps.previous_version.outputs.previous_version }}
      current_version: ${{ steps.current_version.outputs.current_version }}
      previous_version: ${{ steps.previous_version.outputs.previous_version }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main
        with:
          fetch-depth: 0
      - name: Get tags
        run: git fetch --tags origin
      - uses: taiki-e/cache-cargo-install-action@v1
        with:
          tool: cargo-edit
      - uses: armakuni/github-actions/setup-cocogitto@v0.18.2
      - uses: armakuni/github-actions/setup-poetry@v0.18.2
      - id: previous_version
        run: |
          cog get-version | tee .version
          echo "previous_version=$( cat .version )"  >> "$GITHUB_OUTPUT"
          rm .version
        shell: bash
      - name: Semver release
        id: release
        run: |
          git config --global user.name "cog-bot"
          git config --global user.email "cog@example.com"
          cog bump --auto
      - id: current_version
        run: |
          cog get-version | tee .version
          echo "current_version=$( cat .version )"  >> "$GITHUB_OUTPUT"
          rm .version
        shell: bash


  docker-push:
    if: needs.release.outputs.version_bump
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest
    needs:
      - release
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1
        with:
          lfs: true
          ref: v${{ needs.release.outputs.current_version }}
          submodules: recursive
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.0.0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.0.0
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.0.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}
      - run: echo "repository=$( echo "ghcr.io/$REPOSITORY" | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"
        id: docker
        name: Turn repository name into docker registry name
        env:
          REPOSITORY: ${{ github.repository }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@62339db73c56dd749060f65a6ebb93a6e056b755
        with:
          images: ${{ steps.docker.outputs.repository }}
          tags: |
            type=raw,value=latest
            type=semver,pattern={{version}},value=v${{ needs.release.outputs.current_version }}
            type=sha
      - name: Deploy build
        uses: docker/build-push-action@v5.0.0
        id: build-and-push
        with:
          context: .
          push: true
          pull: true
          platforms: linux/amd64
          github-token: ${{ secrets.GITHUB_TOKEN }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
